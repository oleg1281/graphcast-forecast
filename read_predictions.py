from os.path import exists

import xarray as xr
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
ds_predict = xr.open_dataset(f"w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/predict_noaa/pred_NOAA_2025-05-14_00h00m_2025-05-14_06h00m.nc", decode_timedelta=True)
ds_origin = xr.open_dataset(f"w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/data_era5/era5_06_05_06_1.nc", decode_timedelta=True)
#ds_origin2 = xr.open_dataset(f"w:/Postprocesing/Oleh Bedenok/GRAPHCAST/data_dla_tests_025_13/out_file_01_02_18_2.nc", decode_timedelta=True)
df_purchase = pd.read_excel("w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/raports/report_tables.xlsx", sheet_name=f"06_05_06")


# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –≥—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
ds_predict["2m_temperature_celsius"] = (ds_predict["2m_temperature"] - 273.15).round(1)
ds_origin["2m_temperature_celsius"] = (ds_origin["2m_temperature"] - 273.15).round(1)
#ds_origin2["2m_temperature_celsius"] = (ds_origin2["2m_temperature"] - 273.15).round(1)

# –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–∫–∏ (55, 17)
temp_c_predict = ds_predict["2m_temperature_celsius"].sel(lat=55, lon=17, method="nearest").values.flatten()
#temp_k_predict = ds_predict["2m_temperature"].sel(lat=55, lon=17, method="nearest").values.flatten()
temp_c_origin = ds_origin["2m_temperature_celsius"].sel(lat=55, lon=17, method="nearest").values.flatten()
#temp_k_origin = ds_origin["2m_temperature"].sel(lat=55, lon=17, method="nearest").values.flatten()
#temp_c_origin2 = ds_origin2["2m_temperature_celsius"].sel(lat=55, lon=17, method="nearest").values.flatten()
#temp_k_origin2 = ds_origin2["2m_temperature"].sel(lat=55, lon=17, method="nearest").values.flatten()
temp_c_purchase = df_purchase['T2m'].values.flatten()

# –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
temp_c_origin = temp_c_origin[2:]
#temp_k_origin = temp_k_origin[3:]
temp_c_purchase = temp_c_purchase[1:]

# –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
#temp_c_origin = np.concatenate([temp_c_origin, temp_c_origin2])
#temp_k_origin = np.concatenate([temp_k_origin, temp_k_origin2])

# üõ† –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–∏–ª–∏ –æ–±—Ä–µ–∑–∫–∞) –º–∞—Å—Å–∏–≤–æ–≤ –¥–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
def safe_pad(array, target_len):
    current_len = len(array)
    if current_len < target_len:
        return np.pad(array, (0, target_len - current_len), constant_values=np.nan)
    else:
        return array[:target_len]  # üü† –æ–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
max_len = max(
    len(temp_c_predict),
    len(temp_c_origin),
    len(temp_c_purchase)  # üõ† –¥–æ–±–∞–≤–ª–µ–Ω–æ, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
temp_c_predict = safe_pad(temp_c_predict, max_len)
#temp_k_predict = safe_pad(temp_k_predict, max_len)
temp_c_origin  = safe_pad(temp_c_origin, max_len)
#temp_k_origin  = safe_pad(temp_k_origin, max_len)
temp_c_purchase = safe_pad(temp_c_purchase.astype(float), max_len)


# –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã: –Ω–∞—á–∏–Ω–∞—è —Å 2025-01-23 18:00 –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
start_time = datetime(2025, 5, 6, 12)
dates = [start_time + timedelta(hours=6 * i) for i in range(max_len)]

# –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame
df = pd.DataFrame({
    "Data": [dt.strftime("%d.%m.%Y %H:%M") for dt in dates],
    "Pred (¬∞C)": temp_c_predict,
    "Orig (¬∞C)": temp_c_origin,
    "Purchase (¬∞C)": temp_c_purchase
})
print(temp_c_origin)
print(df["Orig (¬∞C)"])
df.set_index("Data", inplace=True)

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
print(df)

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
ax = df.plot(
    y=["Pred (¬∞C)", "Orig (¬∞C)", "Purchase (¬∞C)"],  # <== –¥–æ–±–∞–≤—å —Ç—Ä–µ—Ç—å—é –∫–æ–ª–æ–Ω–∫—É
    figsize=(12, 6),
    title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ç–æ—á–∫–µ (55¬∞N, 17¬∞E)"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–µ–π
plt.grid()
plt.ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)")
plt.xticks(rotation=90)

# ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ –ø–æ –æ—Å–∏ X
ax.set_xticks(range(len(df.index)))  # –ö–∞–∂–¥–∞—è –¥–∞—Ç–∞
ax.set_xticklabels(df.index, rotation=90)

# ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–µ–ª–µ–Ω–∏—è –ø–æ –æ—Å–∏ Y
ax.yaxis.set_major_locator(ticker.MaxNLocator(integer=True))

# ‚úÖ –ó–∞–ª–∏–≤–∫–∞ –∑–µ–ª—ë–Ω—ã–º –ø–µ—Ä–≤—ã—Ö 20 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
for i in range(19):  # 20 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ‚Äî —ç—Ç–æ 19 –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
    ax.axvspan(df.index[i], df.index[i + 1], color="green", alpha=0.15)

# ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ —à–∞–≥–∏ –ø–æ –æ—Å–∏ Y
ax.set_ylim(-5, 10)
ax.yaxis.set_major_locator(ticker.MultipleLocator(1))
ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f"{x:.0f}"))

plt.tight_layout()
plt.show()
