from os.path import exists
import os
import xarray as xr
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker



def noaa_data():
    folder = r"W:\Postprocesing\Oleh Bedenok\GRAPHCAST\NOAA\TEST_Graphcast_14,05,2025-31,05,2025\dataset_NOAA"
    data_NOAA_knots = []


    for filename in sorted(os.listdir(folder)):
        if filename.endswith(".nc"):
            filepath = os.path.join(folder, filename)
            try:
                ds = xr.open_dataset(filepath, decode_timedelta=True)
                temp_u = ds["10m_u_component_of_wind"].isel(time=0).sel(lat=55, lon=17, method="nearest").values.flatten()
                temp_v = ds["10m_v_component_of_wind"].isel(time=0).sel(lat=55, lon=17, method="nearest").values.flatten()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                ws10_o = np.sqrt(temp_u ** 2 + temp_v ** 2)
                ws10_knots_o = ws10_o * 1.94384
                for i in range(len(ws10_knots_o)):
                    #print(f'temp_u={temp_u}, temp_v={temp_v}, ws10_knots_o={ws10_knots_o}')
                    pass

                data_NOAA_knots.append(ws10_knots_o.round(1))

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–∞–π–ª—ñ {filename}: {e}")

    #print(f"‚úÖ –ó–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —É —Ç–æ—á—Ü—ñ (55, 17) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É: {len(data_NOAA_C)}")

    dates = [
        '14.05.2025 18:00', '15.05.2025 00:00', '15.05.2025 06:00', '15.05.2025 12:00', '15.05.2025 18:00',
        '16.05.2025 00:00',
        '16.05.2025 06:00', '16.05.2025 12:00', '16.05.2025 18:00', '17.05.2025 00:00', '17.05.2025 06:00',
        '17.05.2025 12:00',
        '17.05.2025 18:00', '18.05.2025 00:00', '18.05.2025 06:00', '18.05.2025 12:00', '18.05.2025 18:00',
        '19.05.2025 00:00',
        '19.05.2025 06:00', '19.05.2025 12:00', '19.05.2025 18:00', '20.05.2025 00:00', '20.05.2025 06:00',
        '20.05.2025 12:00',
        '20.05.2025 18:00', '21.05.2025 00:00', '21.05.2025 06:00', '21.05.2025 12:00', '21.05.2025 18:00',
        '22.05.2025 00:00',
        '22.05.2025 06:00', '22.05.2025 12:00', '22.05.2025 18:00', '23.05.2025 00:00', '23.05.2025 06:00',
        '23.05.2025 12:00',
        '23.05.2025 18:00', '24.05.2025 00:00', '24.05.2025 06:00', '24.05.2025 12:00', '24.05.2025 18:00',
        '25.05.2025 00:00',
        '25.05.2025 06:00', '25.05.2025 12:00', '25.05.2025 18:00', '26.05.2025 00:00', '26.05.2025 06:00',
        '26.05.2025 12:00',
        '26.05.2025 18:00', '27.05.2025 00:00', '27.05.2025 06:00', '27.05.2025 12:00', '27.05.2025 18:00',
        '28.05.2025 00:00',
        '28.05.2025 06:00', '28.05.2025 12:00', '28.05.2025 18:00', '29.05.2025 00:00', '29.05.2025 06:00',
        '29.05.2025 12:00',
        '29.05.2025 18:00', '30.05.2025 00:00', '30.05.2025 06:00', '30.05.2025 12:00', '30.05.2025 18:00',
        '31.05.2025 00:00',
        '31.05.2025 06:00', '31.05.2025 12:00', '31.05.2025 18:00', '01.06.2025 00:00', '01.06.2025 06:00',
        '01.06.2025 12:00',
        '01.06.2025 18:00', '02.06.2025 00:00', '02.06.2025 06:00', '02.06.2025 12:00', '02.06.2025 18:00',
        '03.06.2025 00:00',
        '03.06.2025 06:00', '03.06.2025 12:00', '03.06.2025 18:00', '04.06.2025 00:00', '04.06.2025 06:00',
        '04.06.2025 12:00',
        '04.06.2025 18:00', '05.06.2025 00:00', '05.06.2025 06:00', '05.06.2025 12:00', '05.06.2025 18:00',
        '06.06.2025 00:00',
        '06.06.2025 06:00', '06.06.2025 12:00', '06.06.2025 18:00', '07.06.2025 00:00', '07.06.2025 06:00',
        '07.06.2025 12:00',
        '07.06.2025 18:00', '08.06.2025 00:00', '08.06.2025 06:00', '08.06.2025 12:00', '08.06.2025 18:00',
        '09.06.2025 00:00',
        '09.06.2025 06:00', '09.06.2025 12:00', '09.06.2025 18:00', '10.06.2025 00:00', '10.06.2025 06:00',
        '10.06.2025 12:00',
        '10.06.2025 18:00'
    ]

    index = pd.to_datetime(dates, dayfirst=True)

    while len(data_NOAA_knots) < len(index):
        data_NOAA_knots.append(None)

    # –£—Å–µ—á–µ–Ω–∏–µ NOAA –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    data_NOAA_C = data_NOAA_knots[:len(index)]
    noa_data = pd.DataFrame({'NOAA_original': data_NOAA_C}, index=index)
    return noa_data

noaa_date = noaa_data()
print(noaa_date)

x = 0    # –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 0 –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ 18 —á–∞—Å–æ–≤ –∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 2 –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥—ã 06 —á–∞—Å–æ–≤

def pred(date):
    global x
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    ds_predict_NOAA = xr.open_dataset(
        f"w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/TEST_Graphcast_14,05,2025-31,05,2025/predict_noaa/pred_NOAA_{date}.nc",
        decode_timedelta=True)

    # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –º/—Å
    u10 = ds_predict_NOAA["10m_u_component_of_wind"]
    v10 = ds_predict_NOAA["10m_v_component_of_wind"]
    ds_predict_NOAA["10m_wind_speed"] = np.sqrt(u10 ** 2 + v10 ** 2)

    # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ —É–∑–ª–∞—Ö
    ds_predict_NOAA["10m_wind_speed_kts"] = ds_predict_NOAA["10m_wind_speed"] * 1.94384

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    temp_kts_predict_NOAA = ds_predict_NOAA["10m_wind_speed_kts"].sel(lat=55, lon=17, method="nearest").values.flatten()


    df_purchase = pd.read_excel(f"w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/TEST_Graphcast_14,05,2025-31,05,2025/report_tables.xlsx", sheet_name=f"{date}")

    temp_Ws10m_purchase = df_purchase['Ws10m'].values.flatten()
    #print(f"Ws10m_purchase= {Ws10m_purchase}") # 24 —Å–ø–∏—Å–æ–∫

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    max_len = max(len(temp_kts_predict_NOAA), len(temp_Ws10m_purchase))

    temp_purchase = np.pad(temp_Ws10m_purchase.astype(float), (0, max_len - len(temp_Ws10m_purchase)), constant_values=np.nan)
    temp_predict_NOAA = np.pad(temp_kts_predict_NOAA, (0, max_len - len(temp_kts_predict_NOAA)), constant_values=np.nan)


    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É '22_02_18' –≤ datetime-–æ–±—ä–µ–∫—Ç
    start_time = datetime.strptime(date, "%d_%m_%H").replace(year=2025)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    dates = [start_time + timedelta(hours=6 * i) for i in range(max_len)]
    # print(len(noaa_date[:108]))
#-----------------------------------------------------------------------------
    noaa_slice = noaa_date["NOAA_original"][x:50 + x]
    noaa_d = [
        val[0] if isinstance(val, (list, np.ndarray)) and len(val) > 0 else np.nan
        for val in noaa_slice
    ]

    # –î–æ–ø–æ–ª–Ω—è–µ–º, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ < 50
    if len(noaa_d) < 50:
        noaa_d += [np.nan] * (50 - len(noaa_d))
# -----------------------------------------------------------------------------
    print(len(temp_purchase), len(temp_predict_NOAA), len(noaa_d))

    # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame
    df = pd.DataFrame({
        "Data": [dt.strftime("%d.%m.%Y %H:%M") for dt in dates],
        "prognoza kupowana od StormGeo (knots)": temp_purchase,
        "Prognoza MEWO (knots)": temp_predict_NOAA,
        "dane rzeczywiste NOAA (knots)": noaa_d

    })

    x += 2

    df.set_index("Data", inplace=True)

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    # print(df)

    dt_minus_6 = dates[0] - timedelta(hours=6)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots(figsize=(12, 6))

    # –õ–∏–Ω–∏–∏ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
    ax.plot(df.index, df["prognoza kupowana od StormGeo (knots)"], label="prognoza kupowana od StormGeo (knots)",
            linestyle='--', linewidth=1.5)
    ax.plot(df.index, df["Prognoza MEWO (knots)"], label="Prognoza MEWO (knots)", linestyle='--', linewidth=1.5)
    ax.plot(df.index, df["dane rzeczywiste NOAA (knots)"], label="dane rzeczywiste NOAA (knots)", linestyle='-', linewidth=2.5)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏
    ax.set_title(f"Wiatr w punkce (55¬∞N, 17¬∞E) prognoza zrobiona {dt_minus_6} siatka 1,0")
    ax.set_ylabel("Wiatr (knots)")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
    ax.grid(True)

    # –ú–µ—Ç–∫–∏ –ø–æ –æ—Å–∏ X
    ax.set_xticks(range(len(df.index)))
    ax.set_xticklabels(df.index, rotation=90)

    # –ó–∞–ª–∏–≤–∫–∞ –∑–µ–ª—ë–Ω—ã–º –ø–µ—Ä–≤—ã—Ö 20 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    for i in range(min(20, len(df.index) - 1)):
        ax.axvspan(df.index[i], df.index[i + 1], color="green", alpha=0.15)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–∏ Y
    ax.set_ylim(-10, 35)
    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))
    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f"{x:.0f}"))

    # –õ–µ–≥–µ–Ω–¥–∞ –∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞
    ax.legend()
    plt.tight_layout()

    return fig



dict_keys = ['14/05_18', '15/05_06', '15/05_18', '16/05_06', '16/05_18', '17/05_06', '17/05_18', '18/05_06', '18/05_18', '19/05_06', '19/05_18', '20/05_06', '20/05_18', '21/05_06', '21/05_18', '22/05_06', '22/05_18', '23/05_06', '23/05_18', '24/05_06', '24/05_18', '25/05_06', '25/05_18', '26/05_06', '26/05_18', '27/05_06', '27/05_18', '28/05_06', '28/05_18', '29/05_06', '29/05_18', '30/05_06', '30/05_18', '31/05_06', '31/05_18']
#dict_keys = [k for k in dict_keys if k.endswith('_18')]

from matplotlib.backends.backend_pdf import PdfPages
import os

# üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª—é—á–µ–π
#dict_keys = [k for k in dict_keys if k.endswith('_06')]
dict_keys = [k.replace('/', '_') for k in dict_keys]

# üìÑ –ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π PDF
output_pdf_path = "w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/TEST_Graphcast_14,05,2025-31,05,2025/raport/winds_report_all.pdf"
os.makedirs(os.path.dirname(output_pdf_path), exist_ok=True)

# üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PDF
with PdfPages(output_pdf_path) as pdf:
    for date in dict_keys:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {date}...")
        try:
            fig = pred(date)
            if date not in ['14_05_18', '15_05_06', '15_05_18', '16_05_06']:
                pdf.savefig(fig)
            plt.close(fig)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {date}: {e}")

print(f"‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_pdf_path}")
