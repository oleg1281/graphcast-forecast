from os.path import exists
import os
import xarray as xr
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

-------------------------------------------------  –Ω–µ—Ä–∞–±–æ—á–∏–π ----------------------------------------

def noaa_data():
    folder = r"W:\Postprocesing\Oleh Bedenok\GRAPHCAST\NOAA\TEST_Graphcast_14,05,2025-31,05,2025\dataset_NOAA"
    data_NOAA_knots = []


    for filename in sorted(os.listdir(folder)):
        if filename.endswith(".nc"):
            filepath = os.path.join(folder, filename)
            try:
                ds = xr.open_dataset(filepath, decode_timedelta=True)
                temp_u = ds["10m_u_component_of_wind"].isel(time=0).sel(lat=55, lon=17, method="nearest").values.flatten()
                temp_v = ds["10m_v_component_of_wind"].isel(time=0).sel(lat=55, lon=17, method="nearest").values.flatten()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                ws10_o = np.sqrt(temp_u ** 2 + temp_v ** 2)
                ws10_knots_o = ws10_o * 1.94384
                #print(f'temp_u={temp_u}, temp_v={temp_v}, ws10_knots_o={ws10_knots_o}')

                data_NOAA_knots.append(ws10_knots_o.round(1))

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–∞–π–ª—ñ {filename}: {e}")

    #print(f"‚úÖ –ó–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —É —Ç–æ—á—Ü—ñ (55, 17) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É: {len(data_NOAA_C)}")

    dates = [
        '14.05.2025 18:00', '15.05.2025 00:00', '15.05.2025 06:00', '15.05.2025 12:00', '15.05.2025 18:00',
        '16.05.2025 00:00',
        '16.05.2025 06:00', '16.05.2025 12:00', '16.05.2025 18:00', '17.05.2025 00:00', '17.05.2025 06:00',
        '17.05.2025 12:00',
        '17.05.2025 18:00', '18.05.2025 00:00', '18.05.2025 06:00', '18.05.2025 12:00', '18.05.2025 18:00',
        '19.05.2025 00:00',
        '19.05.2025 06:00', '19.05.2025 12:00', '19.05.2025 18:00', '20.05.2025 00:00', '20.05.2025 06:00',
        '20.05.2025 12:00',
        '20.05.2025 18:00', '21.05.2025 00:00', '21.05.2025 06:00', '21.05.2025 12:00', '21.05.2025 18:00',
        '22.05.2025 00:00',
        '22.05.2025 06:00', '22.05.2025 12:00', '22.05.2025 18:00', '23.05.2025 00:00', '23.05.2025 06:00',
        '23.05.2025 12:00',
        '23.05.2025 18:00', '24.05.2025 00:00', '24.05.2025 06:00', '24.05.2025 12:00', '24.05.2025 18:00',
        '25.05.2025 00:00',
        '25.05.2025 06:00', '25.05.2025 12:00', '25.05.2025 18:00', '26.05.2025 00:00', '26.05.2025 06:00',
        '26.05.2025 12:00',
        '26.05.2025 18:00', '27.05.2025 00:00', '27.05.2025 06:00', '27.05.2025 12:00', '27.05.2025 18:00',
        '28.05.2025 00:00',
        '28.05.2025 06:00', '28.05.2025 12:00', '28.05.2025 18:00', '29.05.2025 00:00', '29.05.2025 06:00',
        '29.05.2025 12:00',
        '29.05.2025 18:00', '30.05.2025 00:00', '30.05.2025 06:00', '30.05.2025 12:00', '30.05.2025 18:00',
        '31.05.2025 00:00',
        '31.05.2025 06:00', '31.05.2025 12:00', '31.05.2025 18:00', '01.06.2025 00:00', '01.06.2025 06:00',
        '01.06.2025 12:00',
        '01.06.2025 18:00', '02.06.2025 00:00', '02.06.2025 06:00', '02.06.2025 12:00', '02.06.2025 18:00',
        '03.06.2025 00:00',
        '03.06.2025 06:00', '03.06.2025 12:00', '03.06.2025 18:00', '04.06.2025 00:00', '04.06.2025 06:00',
        '04.06.2025 12:00',
        '04.06.2025 18:00', '05.06.2025 00:00', '05.06.2025 06:00', '05.06.2025 12:00', '05.06.2025 18:00',
        '06.06.2025 00:00',
        '06.06.2025 06:00', '06.06.2025 12:00', '06.06.2025 18:00', '07.06.2025 00:00', '07.06.2025 06:00',
        '07.06.2025 12:00',
        '07.06.2025 18:00', '08.06.2025 00:00', '08.06.2025 06:00', '08.06.2025 12:00', '08.06.2025 18:00',
        '09.06.2025 00:00',
        '09.06.2025 06:00', '09.06.2025 12:00', '09.06.2025 18:00', '10.06.2025 00:00', '10.06.2025 06:00',
        '10.06.2025 12:00',
        '10.06.2025 18:00'
    ]

    index = pd.to_datetime(dates, dayfirst=True)

    while len(data_NOAA_knots) < len(index):
        data_NOAA_knots.append(None)

    # –£—Å–µ—á–µ–Ω–∏–µ NOAA –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    data_NOAA_C = data_NOAA_knots[:len(index)]
    noa_data = pd.DataFrame({'NOAA_original': data_NOAA_C}, index=index)
    return noa_data

noaa_date = noaa_data()
print(noaa_date)

date = '14_05_18'

x = 0

def pred(date):
    global x
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    ds_predict_NOAA = xr.open_dataset(
        f"w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/TEST_Graphcast_14,05,2025-31,05,2025/predict_noaa/pred_NOAA_{date}.nc",
        decode_timedelta=True)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–µ—Ç—Ä–∞
    u10_o = ds_predict_NOAA["10m_u_component_of_wind"].sel(lat=55, lon=17, method="nearest").values.flatten()
    v10_o = ds_predict_NOAA["10m_v_component_of_wind"].sel(lat=55, lon=17, method="nearest").values.flatten()
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
    ws10_o = np.sqrt(u10_o ** 2 + v10_o ** 2)
    ws10_knots_o = ws10_o * 1.94384
    #print(f"ws10_knots_o={ws10_knots_o}")  # 50 —Å–ø–∏—Å–æ–∫
    print(f'noaa_date= {noaa_date}')  # 109 pandas


    df_purchase = pd.read_excel(f"w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/TEST_Graphcast_14,05,2025-31,05,2025/report_tables.xlsx", sheet_name=f"{date}")

    Ws10m_purchase = df_purchase['Ws10m'].values.flatten()
    #print(f"Ws10m_purchase= {Ws10m_purchase}") # 24 —Å–ø–∏—Å–æ–∫

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –∫ –¥–ª–∏–Ω–µ index
    ws10_knots_o_full = ws10_knots_o + [None] * (109 - len(ws10_knots_o))
    Ws10m_purchase_full = Ws10m_purchase + [None] * (109 - len(Ws10m_purchase))

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    noaa_date["Ws10m_predict"] = ws10_knots_o_full
    noaa_date["Ws10m_purchase"] = Ws10m_purchase_full

    # –ü–µ—á–∞—Ç—å
    print(noaa_date)


    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    max_len = max(len(noaa_date), len(ws10_knots_o))


    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É '22_02_18' –≤ datetime-–æ–±—ä–µ–∫—Ç
    start_time = datetime.strptime(date, "%d_%m_%H").replace(year=2025)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    dates = [start_time + timedelta(hours=6 * i) for i in range(max_len)]

    noaa_d = noaa_date["NOAA"][x:50 + x].tolist()

    # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame
    df = pd.DataFrame({
        "Data": [dt.strftime("%d.%m.%Y %H:%M") for dt in dates],
        "ws10 MEWO (knots)": ws10_knots_p,
        "dane rzeczywiste ERA5 (knots)": ws10_knots_o,
        "ws10 prognoza kupowana od StormGeo (knots)": Ws10m_purchase
    })

    x += 4

    df.set_index("Data", inplace=True)

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    #print(df)

    dt_minus_6 = dates[0] - timedelta(hours=6)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    ax = df.plot(
        y=["ws10 MEWO (knots)", "dane rzeczywiste ERA5 (knots)", "ws10 prognoza kupowana od StormGeo (knots)"],
        figsize=(12, 6),
        title=f"Wiatr w punkce (55¬∞N, 17¬∞E) prognoza zrobiona {dt_minus_6}"
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–µ–π
    plt.grid()
    plt.ylabel("Wiatr (knots)")
    plt.xticks(rotation=90)

    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ 10 m/s ‚âà 19.44 —É–∑–ª–æ–≤
    #ax.axhline(y=19.44, color="red", linestyle="--", linewidth=1.5, label="10 m/s")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ –ø–æ –æ—Å–∏ X
    ax.set_xticks(range(len(df.index)))
    ax.set_xticklabels(df.index, rotation=90)

    # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–µ–ª–µ–Ω–∏—è –ø–æ –æ—Å–∏ Y
    ax.yaxis.set_major_locator(ticker.MaxNLocator(integer=True))

    # –ó–∞–ª–∏–≤–∫–∞ –∑–µ–ª—ë–Ω—ã–º –ø–µ—Ä–≤—ã—Ö 20 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    for i in range(19):
        ax.axvspan(df.index[i], df.index[i + 1], color="green", alpha=0.15)

    # –ì—Ä–∞–Ω–∏—Ü—ã –∏ —à–∞–≥–∏ –ø–æ –æ—Å–∏ Y
    ax.set_ylim(-10, 30)
    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))
    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f"{x:.0f}"))

    plt.tight_layout()

    # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    # plt.pause(10)
    # plt.close()

    plt.tight_layout()
    fig = plt.gcf()
    return fig


dict_keys = ['14/05_18', '15/05_06', '15/05_18', '16/05_06', '16/05_18', '17/05_06', '17/05_18', '18/05_06', '18/05_18', '19/05_06', '19/05_18', '20/05_06', '20/05_18', '21/05_06', '21/05_18', '22/05_06', '22/05_18', '23/05_06', '23/05_18', '24/05_06', '24/05_18', '25/05_06', '25/05_18', '26/05_06', '26/05_18', '27/05_06', '27/05_18', '28/05_06', '28/05_18', '29/05_06', '29/05_18', '30/05_06', '30/05_18', '31/05_06', '31/05_18']
#dict_keys = [k for k in dict_keys if k.endswith('_18')]

from matplotlib.backends.backend_pdf import PdfPages
import os

# üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª—é—á–µ–π
dict_keys = [k for k in dict_keys if k.endswith('_18')]
dict_keys = [k.replace('/', '_') for k in dict_keys]

# üìÑ –ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π PDF
output_pdf_path = "w:/Postprocesing/Oleh Bedenok/GRAPHCAST/NOAA/TEST_Graphcast_14,05,2025-31,05,2025/raport/winds_report.pdf"
os.makedirs(os.path.dirname(output_pdf_path), exist_ok=True)

# üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PDF
with PdfPages(output_pdf_path) as pdf:
    for date in dict_keys:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {date}...")
        try:
            #pass
            fig = pred(date)       # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            pdf.savefig(fig)       # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ PDF
            plt.close(fig)         # –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {date}: {e}")

print(f"‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_pdf_path}")

